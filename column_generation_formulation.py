import master_prob_CG
import sub_prob_CG
import  data

def get_initial_pattern():
    """generate one pattern for each item"""
    pattern = [[0 for i in range(data.item_count)] for i in range(data.item_count)]
    for i in range(data.item_count):
        pattern[i][i] = data.bar_length//data.order_width[i]

    return pattern

def add_pattern(new_pattern,pattern_list):
    pattern_list.append(new_pattern)
    return pattern_list


def main():
    """ Call master problem (LP) and sub problem (ILP) for cutting stock and stop iterations if reduced cost is positive.
     The final solution is generated by solving naster problem with all the patterns in MILP"""
    max_iter = 1000
    optimal_sol =0
    pattern_list = get_initial_pattern()
    for i in range(max_iter):
        print("pattern lenght = ",len(pattern_list))
        """call master problem"""
        dual,obj_val,z = master_prob_CG.master_prob(pattern_list,solver_type="LP")
        """ call sub problem """
        new_pattern,obj = sub_prob_CG.sub_prob(dual)
        """ check if reduced cost is positive"""
        if obj >=-0.001:
            print("sol found =====stopping Col Generation ======= ")
            optimal_sol =1
            break
        pattern_list = add_pattern(new_pattern,pattern_list)

    dual,obj_val,z = master_prob_CG.master_prob(pattern_list,solver_type="MILP")
    for i in range(len(z)):
        if z[(i)].varValue > 0 :
            print("pattern ", pattern_list[i], "= ", z[(i)].varValue)

    if optimal_sol ==1:
        print("========Optimal Solution found=========")
    else:
        print("Algorithm stopped after max iterations ")

if __name__ == '__main__':
    main()
